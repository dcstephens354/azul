{"version":3,"sources":["serviceWorker.js","index.js","images/Circle_Tan_Solid2.png"],"names":["Boolean","window","location","hostname","match","Tile","color","position","active","cleared","onClick","tileID","classes","id","className","style","backgroundColor","factoryStyle","width","height","backgroundImage","FactoryBackground","backgroundSize","minWidth","Factory","props","locations","chosenTilesArray","clearedArray","clearedTiles","factoryID","selected","substr","chosenTile","i","colorList","push","length","map","t","key","clickHandler","Square","squareColor","squareID","thisClick","indexOf","filledWallSpace","centerSelected","linesStyle","display","justifyContent","Lines","handleClick","bind","this","amount","squares","squareBGColor","contents","highlight","React","Component","WallRow","color1","color2","color3","color4","color5","Wall","DroppedTilesRow","droppedTilesColors","tileColors","CenterBoard","centerTileColors","selectedTileColor","Number","Score","score","Game","handleTileSelect","e","console","log","target","waitingForAutoma","setState","selectedTile","handleRowSelect","handleDroppedRowSelect","state","tileBag","factoryTiles","rowContents","droppedTiles","centerTiles","filledFactories","wallContents","numberTaken","newFilledFactories","newCenterTiles","clearedTilesArray","filter","factoryNumber","chosenFactory","unchosenTiles","oldCenterTiles","concat","chosenCenterTileColor","centerContents","tileColor","chosenRow","droppedTilesArray","newDroppedTiles","setTimeout","automaTurn","largestCenterSet","colors","largestFactorySet","largestSetFactoryIndex","largestSetColorIndex","currentFactory","colorsCount","tempMax","j","Math","max","apply","automaSelectedFactory","automaSelection","automaSelectedTile","floor","random","largestCenterSetColor","playerRows","wallRows","rowColor","colorIndex","didHorizontalScoring","didVerticalScoring","checkHorzontalScoring","checkVerticalScoring","prevState","droppedTilesScore","checkEndgame","currentTileBag","drawNewRoundTiles","alert","index","direction","row","column","reducer","accumulator","currentValue","maxRoll","reduce","allFactories","drawTile","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.44370938.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport FactoryBackground from './images/Circle_Tan_Solid2.png';\r\n\r\n\r\nconst Tile = ({color, position, active, cleared, onClick, tileID}) => {\r\n    let classes = \"tile \" + position;\r\n\r\n    if(cleared){\r\n        classes = classes + \" clearedTile\"\r\n    }\r\n    else if(active){\r\n        classes = classes + \" selectedTile\"\r\n    }\r\n    \r\n    classes = classes + \" \" + color + \"Tile\"\r\n     \r\n    return(\r\n        <div id={tileID} onClick={onClick} className={classes} style={{backgroundColor: color}}></div>\r\n    )\r\n}\r\n\r\nlet factoryStyle = {\r\n    width: \"200px\",\r\n    height: \"200px\",\r\n    backgroundImage: \"url(\"+FactoryBackground+\")\",\r\n    backgroundSize: \"cover\",\r\n    position: \"relative\",\r\n    minWidth: \"200px\"\r\n}\r\n\r\nfunction Factory (props){\r\n\r\n        const tiles = [1, 2, 3, 4];\r\n        const locations = [\"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"];\r\n        let chosenTilesArray = [];\r\n        let clearedArray = props.cleared;\r\n        let clearedTiles = false\r\n        let factoryID = props.id + \".\";\r\n\r\n        if(props.selected.substr(0,1) == props.id){\r\n            let chosenTile = props.selected.substr(2,1);\r\n\r\n            for(let i = 0; i < 4; i++){\r\n                if(props.colorList[i] === props.colorList[chosenTile-1]){\r\n                    chosenTilesArray.push(true);\r\n                }\r\n                else{\r\n                    chosenTilesArray.push(false);\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let i = 0; i < clearedArray.length; i++){\r\n            if(clearedArray[i].substr(0,1) == props.id){\r\n                clearedTiles = true;\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div style={factoryStyle}>\r\n                {tiles.map(t => (\r\n                    <Tile key={t} color={props.colorList[t-1]} position={locations[t-1]} active={chosenTilesArray[t-1]} cleared={clearedTiles} onClick={props.clickHandler} tileID={factoryID + t}  />\r\n                ))}\r\n            </div>\r\n        )\r\n    //}\r\n}\r\n\r\n\r\nfunction Square (props) {\r\n\r\n        let squareColor = \"beige\";\r\n        let classes = \"square\";\r\n        let squareID=\"0\";\r\n        let thisClick = ()=>{};\r\n        if(props.color){\r\n            squareColor = props.color;\r\n            let tileClass = props.color+\"Tile\";\r\n            classes = classes + \" \" + props.color + \"Tile\"\r\n        }\r\n        if(props.id){\r\n          squareID = props.id;\r\n          if(props.id.indexOf(\"WR\") > -1){\r\n                if(props.filledWallSpace == null){\r\n                    classes = classes + \" emptyWall\"  \r\n\t\t\t\t}\r\n                else {\r\n                    classes = classes + \" filledWall\"  \r\n\t\t\t\t}\r\n\t\t  }\r\n\t\t}\r\n        if(props.onClick){\r\n            thisClick = props.onClick;\r\n\t\t}\r\n        if(props.centerSelected){\r\n            classes = classes + \" selectedTile\"  \r\n\t\t}\r\n        return (\r\n            <div id={squareID} className={classes} onClick={thisClick} style={{backgroundColor: squareColor}} >\r\n\r\n            </div>\r\n        );\r\n}\r\n\r\nlet linesStyle = {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\"\r\n}\r\n\r\nclass Lines extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(){\r\n        this.props.clickHandler(this.props.amount);\r\n    }\r\n\r\n    render() {\r\n        const squares = [];\r\n        let selected = false;\r\n\r\n        if(this.props.selected == this.props.amount){\r\n            selected = true;\r\n        }\r\n\r\n        let squareBGColor = \"\";\r\n        for(let i = 0; i < this.props.amount; i++){\r\n            if(this.props.contents[i] == null){\r\n                squareBGColor = \"beige\";\r\n            }\r\n            else {\r\n                squareBGColor = this.props.contents[i];\r\n            }\r\n            squares.push(<Square key={i} highlight={selected} color={squareBGColor}/>)\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div onClick={this.handleClick}  style={linesStyle}>\r\n                {squares}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass WallRow extends React.Component{\r\n    render(){\r\n        \r\n        return(\r\n            <div style={{display: \"flex\"}}>\r\n                <Square id={this.props.id + \".1\"} filledWallSpace={this.props.contents[0]} color={this.props.color1}/>\r\n                <Square id={this.props.id + \".2\"} filledWallSpace={this.props.contents[1]} color={this.props.color2}/>\r\n                <Square id={this.props.id + \".3\"} filledWallSpace={this.props.contents[2]} color={this.props.color3}/>\r\n                <Square id={this.props.id + \".4\"} filledWallSpace={this.props.contents[3]} color={this.props.color4}/>\r\n                <Square id={this.props.id + \".5\"} filledWallSpace={this.props.contents[4]} color={this.props.color5}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Wall extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className={\"Wall\"}>\r\n                <WallRow id={\"WR1\"} contents={this.props.contents[0]} color1={\"blue\"} color2={\"orange\"} color3={\"red\"} color4={\"darkgrey\"} color5={\"cyan\"}/>\r\n                <WallRow id={\"WR2\"} contents={this.props.contents[1]} color1={\"cyan\"} color2={\"blue\"} color3={\"orange\"} color4={\"red\"} color5={\"darkgrey\"}/>\r\n                <WallRow id={\"WR3\"} contents={this.props.contents[2]} color1={\"darkgrey\"} color2={\"cyan\"} color3={\"blue\"} color4={\"orange\"} color5={\"red\"}/>\r\n                <WallRow id={\"WR4\"} contents={this.props.contents[3]} color1={\"red\"} color2={\"darkgrey\"} color3={\"cyan\"} color4={\"blue\"} color5={\"orange\"}/>\r\n                <WallRow id={\"WR5\"} contents={this.props.contents[4]} color1={\"orange\"} color2={\"red\"} color3={\"darkgrey\"} color4={\"cyan\"} color5={\"blue\"}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass DroppedTilesRow extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    \r\n    handleClick(){\r\n        this.props.clickHandler();\r\n    }\r\n\r\n    render(){\r\n\r\n        let droppedTilesColors = [\"darkred\", \"darkred\", \"darkred\", \"darkred\", \"darkred\", \"darkred\", \"darkred\", \"darkred\"];\r\n        for(let i = 0; i < this.props.tileColors.length; i++){\r\n            droppedTilesColors[i] = this.props.tileColors[i];\r\n        }\r\n\r\n        return(\r\n            <div className={\"droppedTilesRow\"} onClick={this.handleClick}>\r\n                <div style={{display: \"flex\"}}>\r\n                    <span> -1 <Square color={droppedTilesColors[0]}/></span>\r\n                    <span> -1 <Square color={droppedTilesColors[1]}/></span>\r\n                    <span> -2 <Square color={droppedTilesColors[2]}/></span>\r\n                    <span> -2 <Square color={droppedTilesColors[3]}/></span>\r\n                    <span> -2 <Square color={droppedTilesColors[4]}/></span>\r\n                    <span> -3 <Square color={droppedTilesColors[5]}/></span>\r\n                    <span> -3 <Square color={droppedTilesColors[6]}/></span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass CenterBoard extends React.Component{\r\n    render(){\r\n        let centerTileColors = [\"peachpuff\", \"peachpuff\", \"peachpuff\", \"peachpuff\", \"peachpuff\", \"peachpuff\", \"peachpuff\", \"peachpuff\", \"peachpuff\", \"peachpuff\", \"peachpuff\", \"peachpuff\", \"peachpuff\"];\r\n        let selected = [false, false, false, false, false, false, false, false, false, false, false, false, false];\r\n\r\n        for(let i = 0; i < this.props.tileColors.length; i++){\r\n            centerTileColors[i] = this.props.tileColors[i];\r\n        }\r\n\r\n        if(this.props.selected.substr(0,1) === \"c\"){\r\n            let selectedTileColor = centerTileColors[(Number(this.props.selected.substr(1,1)) - 1)];\r\n            for(let i = 0; i < this.props.tileColors.length; i++){\r\n                if(this.props.tileColors[i] === selectedTileColor){\r\n                    selected[i] = true;\r\n\t\t\t\t}     \r\n\t\t\t}  \r\n\t\t}\r\n\r\n        return(\r\n            <div className={\"centerRow\"}>\r\n                <div style={{display: \"flex\"}}>\r\n                    <Square id={'c1'} color={centerTileColors[0]} onClick={this.props.clickHandler} centerSelected={selected[0]}/>\r\n                    <Square id={'c2'} color={centerTileColors[1]} onClick={this.props.clickHandler} centerSelected={selected[1]}/>\r\n                    <Square id={'c3'} color={centerTileColors[2]} onClick={this.props.clickHandler} centerSelected={selected[2]}/>\r\n                    <Square id={'c4'} color={centerTileColors[3]} onClick={this.props.clickHandler} centerSelected={selected[3]}/>\r\n                    <Square id={'c5'} color={centerTileColors[4]} onClick={this.props.clickHandler} centerSelected={selected[4]}/>\r\n                    <Square id={'c6'} color={centerTileColors[5]} onClick={this.props.clickHandler} centerSelected={selected[5]}/>\r\n                    <Square id={'c7'} color={centerTileColors[6]} onClick={this.props.clickHandler} centerSelected={selected[6]}/>\r\n                    <Square id={'c8'} color={centerTileColors[7]} onClick={this.props.clickHandler} centerSelected={selected[7]}/>\r\n                    <Square id={'c9'} color={centerTileColors[8]} onClick={this.props.clickHandler} centerSelected={selected[8]}/>\r\n                    <Square id={'c10'} color={centerTileColors[9]} onClick={this.props.clickHandler} centerSelected={selected[9]}/>\r\n                    <Square id={'c11'} color={centerTileColors[10]} onClick={this.props.clickHandler} centerSelected={selected[10]}/>\r\n                    <Square id={'c12'} color={centerTileColors[11]} onClick={this.props.clickHandler} centerSelected={selected[11]}/>\r\n                    <Square id={'c13'} color={centerTileColors[12]} onClick={this.props.clickHandler} centerSelected={selected[12]}/>\r\n                </div>\r\n            </div>\r\n\t    )\r\n\t}\r\n}\r\n\r\nfunction Score(props){\r\n    return(\r\n        <span className={\"playerScore\"}>Score: {props.score}</span>\r\n\t)\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleRowSelect = this.handleRowSelect.bind(this);\r\n        this.handleDroppedRowSelect = this.handleDroppedRowSelect.bind(this);\r\n\r\n        this.state = {\r\n            selectedTile: \"0\",\r\n            selectedTileColor: null,\r\n            tileBag: [20,20,20,20,20], //[red, blue, black, orange, cyan]\r\n            factoryTiles: [[],[],[],[],[]],\r\n            clearedTiles: [],\r\n            rowContents: [[null],[null,null],[null,null,null],[null,null,null,null],[null,null,null,null,null]],\r\n            droppedTiles: [],\r\n            centerTiles: [],\r\n            filledFactories: [0,1,2,3,4],\r\n            wallContents: [[null, null, null, null, null],[null, null, null, null, null],[null, null, null, null, null],[null, null, null, null, null],[null, null, null, null, null]],\r\n            score: 0\r\n        };\r\n\r\n        let waitingForAutoma = false;\r\n\r\n    }\r\n\r\n\r\n    handleTileSelect = (e) => {\r\n    console.log(e.target);\r\n        if(!this.waitingForAutoma){\r\n            this.setState({\r\n                selectedTile : e.target.id,\r\n                selectedTileColor : e.target.style.backgroundColor\r\n            });\r\n\t\t}\r\n    }\r\n\r\n    \r\n\r\n\r\n    handleRowSelect(id) {\r\n\r\n        if(!this.waitingForAutoma && this.state.selectedTile !== \"0\" && (this.state.rowContents[id-1][0] == null || this.state.rowContents[id-1][0] === this.state.selectedTileColor) && (this.state.wallContents[id-1].indexOf(this.state.selectedTileColor) === -1)){\r\n            let numberTaken = 0;\r\n            let newFilledFactories = this.state.filledFactories;\r\n            let newCenterTiles = [];\r\n\r\n            if(this.state.selectedTile.substr(0,1) !== \"c\"){\r\n                let clearedTilesArray = this.state.clearedTiles;\r\n                clearedTilesArray.push(this.state.selectedTile);\r\n                \r\n                newFilledFactories = newFilledFactories.filter(factoryNumber => factoryNumber !== (Number(this.state.selectedTile.substr(0,1))-1));\r\n\r\n                this.setState({\r\n                    clearedTiles: clearedTilesArray,\r\n                    selectedTile: \"0\",\r\n                    filledFactories: newFilledFactories,\r\n                })\r\n\r\n                let chosenFactory = this.state.factoryTiles[(this.state.selectedTile.substr(0,1))-1];\r\n                let unchosenTiles = [];\r\n                for(let i = 0; i < chosenFactory.length; i++){\r\n                    if(chosenFactory[i] === this.state.selectedTileColor){\r\n                        numberTaken++;\r\n                    }\r\n                    else{\r\n                        unchosenTiles.push(chosenFactory[i]);        \r\n\t\t\t\t    }\r\n                }\r\n                let oldCenterTiles = this.state.centerTiles;\r\n                newCenterTiles = oldCenterTiles.concat(unchosenTiles);\r\n                this.setState({\r\n                    centerTiles: newCenterTiles,     \r\n\t\t\t    })\r\n\r\n\t\t\t}\r\n            else {\r\n                this.setState({\r\n                    selectedTile: \"0\",\r\n                })\r\n\r\n                let chosenCenterTileColor = this.state.selectedTileColor;\r\n                let centerContents = this.state.centerTiles;\r\n\r\n                \r\n                for(let i = 0; i < centerContents.length; i++){\r\n                    if(centerContents[i] === chosenCenterTileColor){\r\n                        numberTaken++;\r\n                    }\r\n                }\r\n\r\n                newCenterTiles = centerContents.filter(tileColor => tileColor !== chosenCenterTileColor);\r\n                this.setState({\r\n                    centerTiles: newCenterTiles,     \r\n\t\t\t    })\r\n\t\t\t}\r\n\r\n            \r\n            let chosenRow = this.state.rowContents[id-1];\r\n            let droppedTilesArray = [];\r\n            while(numberTaken > 0){\r\n                for(let i = 0; i < chosenRow.length; i++) {\r\n                    if (chosenRow[i] == null) {\r\n                        chosenRow[i] = this.state.selectedTileColor;\r\n                        break;\r\n                    }\r\n                    if(i === chosenRow.length-1){\r\n                        droppedTilesArray.push(this.state.selectedTileColor)\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                numberTaken = numberTaken - 1;\r\n            }\r\n\r\n            let newDroppedTiles = this.state.droppedTiles.concat(droppedTilesArray);\r\n            this.setState({\r\n                droppedTiles: newDroppedTiles,\r\n            })\r\n            \r\n\r\n            this.waitingForAutoma = true;\r\n            setTimeout(() => {\r\n                this.automaTurn(newFilledFactories, newCenterTiles);\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    handleDroppedRowSelect(){\r\n        if(!this.waitingForAutoma && this.state.selectedTile !== \"0\"){\r\n            let newCenterTiles = [];\r\n            let newFilledFactories = this.state.filledFactories;\r\n            let numberTaken = 0;\r\n            \r\n            if(this.state.selectedTile.substr(0,1) !== \"c\"){\r\n                newFilledFactories = newFilledFactories.filter(factoryNumber => factoryNumber !== (Number(this.state.selectedTile.substr(0,1))-1));\r\n\r\n                let clearedTilesArray = this.state.clearedTiles;\r\n                clearedTilesArray.push(this.state.selectedTile);\r\n                this.setState({\r\n                    clearedTiles: clearedTilesArray,\r\n                    selectedTile: \"0\",\r\n                    filledFactories: newFilledFactories,\r\n                })\r\n\r\n                let chosenFactory = this.state.factoryTiles[(this.state.selectedTile.substr(0,1))-1];\r\n                let unchosenTiles = [];\r\n                for(let i = 0; i < chosenFactory.length; i++){\r\n                    if(chosenFactory[i] === this.state.selectedTileColor){\r\n                        numberTaken++;\r\n                    }\r\n                    else {\r\n                        unchosenTiles.push(chosenFactory[i]);     \r\n\t\t\t\t    }\r\n                }\r\n\r\n                \r\n                let oldCenterTiles = this.state.centerTiles;\r\n                newCenterTiles = oldCenterTiles.concat(unchosenTiles);\r\n                this.setState({\r\n                    centerTiles: newCenterTiles,   \r\n                })  \r\n            }\r\n            else {\r\n                this.setState({\r\n                    selectedTile: \"0\",\r\n                })\r\n\r\n                let chosenCenterTileColor = this.state.selectedTileColor;\r\n                let centerContents = this.state.centerTiles;\r\n\r\n                \r\n                for(let i = 0; i < centerContents.length; i++){\r\n                    if(centerContents[i] === chosenCenterTileColor){\r\n                        numberTaken++;\r\n                    }\r\n                }\r\n\r\n                newCenterTiles = centerContents.filter(tileColor => tileColor !== chosenCenterTileColor);\r\n                this.setState({\r\n                    centerTiles: newCenterTiles,     \r\n\t\t\t    })\r\n\t\t\t}\r\n\r\n            let droppedTilesArray = [];\r\n\r\n            for(let i = 0; i < numberTaken; i++){\r\n                droppedTilesArray.push(this.state.selectedTileColor)\r\n\t\t\t}\r\n\r\n            let newDroppedTiles = this.state.droppedTiles.concat(droppedTilesArray);\r\n            this.setState({\r\n                droppedTiles: newDroppedTiles,\r\n            })  \r\n            \r\n            this.waitingForAutoma = true;\r\n            setTimeout(() => {\r\n                this.automaTurn(newFilledFactories, newCenterTiles);\r\n\t\t\t}, 1000);\r\n\t    }\r\n\t}\r\n    \r\n    automaTurn(filledFactories, oldCenterTiles){\r\n       let colors = [\"blue\", \"orange\", \"red\", \"darkgrey\", \"cyan\"];\r\n       let largestFactorySet = 0;\r\n       let largestCenterSet = 0;\r\n       let largestSetFactoryIndex = 0;\r\n       let largestSetColorIndex = \"\";\r\n       let currentFactory = [];\r\n       let colorsCount = [0,0,0,0,0];\r\n       let tempMax = 0;\r\n       let newCenterTiles = [];\r\n       let newFilledFactories = [];\r\n       for(let i = 0; i < filledFactories.length; i++){            \r\n            currentFactory = this.state.factoryTiles[filledFactories[i]];\r\n\r\n            for(let j = 0; j < currentFactory.length; j++){\r\n                colorsCount[colors.indexOf(currentFactory[j])]++;\r\n            }\r\n            \r\n            tempMax = Math.max.apply(null, colorsCount);\r\n            if(tempMax > largestFactorySet){\r\n                largestFactorySet = tempMax;\r\n                largestSetFactoryIndex = i;\r\n                largestSetColorIndex = colorsCount.indexOf(tempMax);\r\n\t\t    }\r\n            colorsCount = [0,0,0,0,0];\r\n\t   }\r\n\r\n       \r\n       for(let i = 0; i < oldCenterTiles.length; i++){\r\n            colorsCount[colors.indexOf(oldCenterTiles[i])]++;\r\n       }\r\n       largestCenterSet = Math.max.apply(null, colorsCount);\r\n\r\n       if(largestFactorySet > 1){\r\n           let automaSelectedFactory = Number(filledFactories[largestSetFactoryIndex])+1;\r\n           let automaSelectedTile = Number(this.state.factoryTiles[(automaSelectedFactory-1)].indexOf(colors[largestSetColorIndex]))+1;\r\n           let automaSelection = automaSelectedFactory + \".\" + automaSelectedTile;\r\n       \r\n            let clearedTilesArray, oldClearedTilesArray;\r\n           clearedTilesArray = oldClearedTilesArray = this.state.clearedTiles;\r\n           clearedTilesArray.push(automaSelection);\r\n                \r\n           newFilledFactories = filledFactories.filter(factoryNumber => factoryNumber !== (Number(automaSelection.substr(0,1))-1));\r\n\r\n           this.setState({\r\n               clearedTiles: clearedTilesArray,\r\n               filledFactories: newFilledFactories,\r\n           })\r\n\r\n       \r\n           let chosenFactory = this.state.factoryTiles[(automaSelection.substr(0,1))-1];\r\n           let unchosenTiles = [];\r\n           for(let i = 0; i < chosenFactory.length; i++){\r\n                if(chosenFactory[i] !== colors[largestSetColorIndex]){\r\n                    unchosenTiles.push(chosenFactory[i]);       \r\n                }\r\n           }\r\n           newCenterTiles = oldCenterTiles.concat(unchosenTiles);\r\n\r\n           this.setState({\r\n                centerTiles: newCenterTiles,     \r\n\t       })\r\n\t   }\r\n       else if(largestFactorySet === 1 && largestCenterSet < 2){\r\n           let automaSelectedFactory = Number(filledFactories[0])+1;\r\n           let automaSelectedTile =  Math.floor(Math.random()*Math.floor(4))+1;\r\n           let automaSelection = automaSelectedFactory + \".\" + automaSelectedTile;\r\n           \r\n           let clearedTilesArray = this.state.clearedTiles;\r\n           clearedTilesArray.push(automaSelection);\r\n\r\n           newFilledFactories = filledFactories.filter(factoryNumber => factoryNumber !== (Number(automaSelection.substr(0,1))-1));\r\n\r\n           this.setState({\r\n               clearedTiles: clearedTilesArray,\r\n               filledFactories: newFilledFactories,\r\n           })\r\n\r\n           \r\n           let chosenFactory = this.state.factoryTiles[(automaSelection.substr(0,1))-1];\r\n           let unchosenTiles = [];\r\n           for(let i = 0; i < chosenFactory.length; i++){\r\n                if(i !== (automaSelectedTile-1)){\r\n                    unchosenTiles.push(chosenFactory[i]);       \r\n                }\r\n           }\r\n           newCenterTiles = oldCenterTiles.concat(unchosenTiles);    \r\n           \r\n           this.setState({\r\n                centerTiles: newCenterTiles,     \r\n\t       })\r\n\t   }\r\n       else if((largestFactorySet === 1 && largestCenterSet !== 1) || (largestFactorySet === 0 && largestCenterSet > 0)){\r\n            largestSetColorIndex = colorsCount.indexOf(largestCenterSet);\r\n            let largestCenterSetColor = colors[largestSetColorIndex];\r\n            \r\n            newFilledFactories = filledFactories;\r\n            newCenterTiles = oldCenterTiles.filter(tileColor => tileColor !== largestCenterSetColor);\r\n\r\n            this.setState({\r\n                 centerTiles: newCenterTiles,     \r\n\t        })\r\n\t   }\r\n     \r\n       \r\n       if(newCenterTiles.length === 0 && newFilledFactories.length === 0){\r\n           //Score, set up next round\r\n           let playerRows = this.state.rowContents;\r\n           let wallRows = this.state.wallContents;\r\n\r\n           for(let i = 0; i < playerRows.length; i++){\r\n               if(playerRows[i].indexOf(null) === -1){\r\n                    let rowColor = playerRows[i][0];\r\n                    let colorIndex = (colors.indexOf(rowColor)+i)%5;\r\n                    wallRows[i][colorIndex] = rowColor;\r\n\r\n                    let didHorizontalScoring = 0;\r\n                    let didVerticalScoring = 0;\r\n\r\n                    if(colorIndex-1 > -1){\r\n                        if(wallRows[i][colorIndex-1] != null){\r\n                            this.checkHorzontalScoring(colorIndex-1, -1, i);\r\n                            didHorizontalScoring = 1;\r\n                        }\r\n\t\t\t\t\t}\r\n\r\n                    if(colorIndex+1 < 5){\r\n                        if(wallRows[i][colorIndex+1] != null){\r\n                            this.checkHorzontalScoring(colorIndex+1, 1, i);\r\n                            didHorizontalScoring = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n                    if(i-1 > -1){\r\n                        if(wallRows[i-1][colorIndex] != null){\r\n                            this.checkVerticalScoring(i-1, -1, colorIndex);\r\n                            didVerticalScoring = 1;\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t}\r\n\r\n                    if(i+1 < 5){\r\n                        if(wallRows[i+1][colorIndex] != null){\r\n                            this.checkVerticalScoring(i+1, 1, colorIndex);\r\n                            didVerticalScoring = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n                    if(didHorizontalScoring === 0 && didVerticalScoring === 0){\r\n                        this.setState((prevState) => {\r\n                            return {\r\n                                score: prevState.score + 1     \r\n\t\t\t                };\r\n\t\t                });\r\n\t\t\t\t\t}\r\n                    else {\r\n                        this.setState((prevState) => {\r\n                            return {\r\n                                score: prevState.score + didHorizontalScoring + didVerticalScoring     \r\n\t\t\t                };\r\n\t\t                });\r\n\t\t\t\t\t}\r\n\r\n\r\n\r\n                    for(let j = 0; j <= i; j++){\r\n                        playerRows[i][j] = null;           \r\n\t\t\t\t\t}\r\n\t\t        }     \r\n\t\t   }\r\n\r\n           \r\n\r\n            this.setState((prevState) => {       \r\n                let droppedTilesScore = 0;\r\n                   switch(prevState.droppedTiles.length){\r\n                        case 1:\r\n                            droppedTilesScore = -1;\r\n                            break;\r\n                        case 2:\r\n                            droppedTilesScore = -2;\r\n                            break;\r\n                        case 3:\r\n                            droppedTilesScore = -4;\r\n                            break;\r\n                        case 4:\r\n                            droppedTilesScore = -6;\r\n                            break;\r\n                        case 5:\r\n                            droppedTilesScore = -8;\r\n                            break;\r\n                        case 6:\r\n                            droppedTilesScore = -11;\r\n                            break;\r\n                        case 7:\r\n                            droppedTilesScore = -14;\r\n                            break;\r\n                        default:\r\n                            break;\r\n\t\t           }\r\n                let newScore = prevState.score + droppedTilesScore;\r\n                return {\r\n                    score: newScore    \r\n\t\t\t    };\r\n\t\t    });\r\n            \r\n            \r\n\r\n           this.setState({\r\n                selectedTile: \"0\",\r\n                selectedTileColor: null,\r\n                clearedTiles: [],\r\n                rowContents: playerRows,\r\n                droppedTiles: [],\r\n                filledFactories: [0,1,2,3,4],\r\n                wallContents: wallRows,\r\n           }, () => {\r\n                this.checkEndgame(this.state.score);\r\n           });\r\n\r\n\t   }\r\n\r\n       this.waitingForAutoma = false;\r\n       \r\n\t}\r\n\r\n    checkEndgame(score){\r\n        let currentTileBag = this.state.tileBag;\r\n        if(currentTileBag[0] + currentTileBag[1] + currentTileBag[2] + currentTileBag[3] + currentTileBag[4] !== 0){\r\n            this.drawNewRoundTiles();\r\n\t\t}\r\n        else {\r\n            alert(\"Game over, you scored \" + score + \" points!\");\r\n\r\n            this.setState({\r\n                selectedTile: \"0\",\r\n                selectedTileColor: null,\r\n                tileBag: [20,20,20,20,20], //[red, blue, black, orange, cyan]\r\n                factoryTiles: [[],[],[],[],[]],\r\n                clearedTiles: [],\r\n                rowContents: [[null],[null,null],[null,null,null],[null,null,null,null],[null,null,null,null,null]],\r\n                droppedTiles: [],\r\n                centerTiles: [],\r\n                filledFactories: [0,1,2,3,4],\r\n                wallContents: [[null, null, null, null, null],[null, null, null, null, null],[null, null, null, null, null],[null, null, null, null, null],[null, null, null, null, null]],\r\n                score: 0\r\n            }, () => {\r\n                this.drawNewRoundTiles();\r\n            });\r\n\r\n\t\t}\r\n\t}\r\n\r\n    checkHorzontalScoring(index, direction, row){\r\n        if(index+direction > -1 && index+direction < 5){\r\n            if(this.state.wallContents[row][index+direction] != null){\r\n                this.checkHorzontalScoring(index+direction, direction, row);\r\n\t\t\t}\r\n\t\t}\r\n\r\n        this.setState((prevState) => {\r\n            return {\r\n                score: prevState.score + 1     \r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n    checkVerticalScoring(index, direction, column){\r\n        if(index+direction > -1 && index+direction < 5){\r\n            if(this.state.wallContents[index+direction][column] != null){\r\n                this.checkVerticalScoring(index+direction, direction, column);\r\n\t\t\t}\r\n\t\t}\r\n\r\n        this.setState((prevState) => {\r\n            return {\r\n                score: prevState.score + 1     \r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n    drawTile(){\r\n        const tileColors = [\"red\", \"blue\", \"darkgrey\", \"orange\", \"cyan\"];\r\n        const reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n        let currentTileBag = this.state.tileBag;\r\n        let maxRoll = currentTileBag.reduce(reducer);\r\n        let chosenTile = Math.floor(Math.random() * Math.floor(maxRoll));\r\n\r\n\r\n        if(chosenTile < currentTileBag[0]){\r\n            currentTileBag[0] = currentTileBag[0] - 1;\r\n\r\n            this.setState({\r\n                tileBag: currentTileBag\r\n            })\r\n            return tileColors[0];\r\n\t\t}\r\n        else if(chosenTile < [currentTileBag[0], currentTileBag[1]].reduce(reducer)){\r\n            currentTileBag[1] = currentTileBag[1] - 1;\r\n\r\n            this.setState({\r\n                tileBag: currentTileBag\r\n            })\r\n            return tileColors[1];\r\n\t\t}\r\n        else if(chosenTile < [currentTileBag[0], currentTileBag[1], currentTileBag[2]].reduce(reducer)){\r\n            currentTileBag[2] = currentTileBag[2] - 1;\r\n\r\n            this.setState({\r\n                tileBag: currentTileBag\r\n            })\r\n            return tileColors[2];\r\n\t\t}\r\n        else if(chosenTile < [currentTileBag[0], currentTileBag[1], currentTileBag[2], currentTileBag[3]].reduce(reducer)){\r\n            currentTileBag[3] = currentTileBag[3] - 1;\r\n\r\n            this.setState({\r\n                tileBag: currentTileBag\r\n            })\r\n            return tileColors[3];\r\n\t\t}\r\n        else if(chosenTile < [currentTileBag[0], currentTileBag[1], currentTileBag[2], currentTileBag[3], currentTileBag[4]].reduce(reducer)){\r\n            currentTileBag[4] = currentTileBag[4] - 1;\r\n\r\n            this.setState({\r\n                tileBag: currentTileBag\r\n            })\r\n            return tileColors[4];\r\n\t\t}\r\n\r\n    }\r\n\r\n    drawNewRoundTiles(){\r\n        let allFactories = [[],[],[],[],[]];\r\n        for(let i = 0; i < 5; i++){\r\n            for(let j = 0; j < 4; j++){\r\n                allFactories[i].push(this.drawTile());\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            factoryTiles: allFactories,\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.drawNewRoundTiles();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"game\">\r\n\r\n                <div className=\"factories\">\r\n                    <Factory id={1}  colorList ={this.state.factoryTiles[0]} clickHandler = {this.handleTileSelect} selected={this.state.selectedTile} cleared={this.state.clearedTiles}/>\r\n                    <Factory id={2}  colorList ={this.state.factoryTiles[1]} clickHandler = {this.handleTileSelect} selected={this.state.selectedTile} cleared={this.state.clearedTiles}/>\r\n                    <Factory id={3}  colorList ={this.state.factoryTiles[2]} clickHandler = {this.handleTileSelect} selected={this.state.selectedTile} cleared={this.state.clearedTiles}/>\r\n                    <Factory id={4}  colorList ={this.state.factoryTiles[3]} clickHandler = {this.handleTileSelect} selected={this.state.selectedTile} cleared={this.state.clearedTiles}/>\r\n                    <Factory id={5}  colorList ={this.state.factoryTiles[4]} clickHandler = {this.handleTileSelect} selected={this.state.selectedTile} cleared={this.state.clearedTiles}/>\r\n                </div>\r\n\r\n                <CenterBoard selected={this.state.selectedTile} tileColors={this.state.centerTiles} clickHandler={this.handleTileSelect}/>\r\n\r\n                <Score score={this.state.score}/>\r\n\r\n                <section className=\"playerBoard\">\r\n                    <div className=\"playerLines\">\r\n                        <Lines clickHandler={this.handleRowSelect} amount={1} contents={this.state.rowContents[0]}/>\r\n                        <Lines clickHandler={this.handleRowSelect} amount={2} contents={this.state.rowContents[1]}/>\r\n                        <Lines clickHandler={this.handleRowSelect} amount={3} contents={this.state.rowContents[2]}/>\r\n                        <Lines clickHandler={this.handleRowSelect} amount={4} contents={this.state.rowContents[3]}/>\r\n                        <Lines clickHandler={this.handleRowSelect} amount={5} contents={this.state.rowContents[4]}/>\r\n                    </div>\r\n\r\n\r\n                    <Wall contents={this.state.wallContents}/>\r\n\r\n                    <DroppedTilesRow clickHandler={this.handleDroppedRowSelect} tileColors={this.state.droppedTiles}/>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Circle_Tan_Solid2.bd4e2b8b.png\";"],"sourceRoot":""}